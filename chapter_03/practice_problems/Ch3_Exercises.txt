Queston 1:

    Suppose I show you a call stack like this:

    ----------------
    |   Greet2     |
    |              |
    -----------------
    | Name:| Maggie |
    -----------------
    |   Greet       |
    |               |
    -----------------
    | Name:| Maggie |
    -----------------

    What information can you give me, based on this call stack?

Answer 1:

    Greet is the first item on the call stack. Name is defined as Maggie, and Greet2 uses this same value for Name as well.
    Greet2 will be popped off of the call stack first, with Greet being partially completed.

    The call stack stores the values of variables for multiple functions. Meaning, until the function that initialized the variable is done,
    that variable is saved in memory for the call stack.
        (Back of the book: Greet calls Greet2 with name = maggie. Greet suspends, and allows Greet2 to continue then pops off the call stack. Greet is now the highest on the call stack, and resumes until it's finishes.)
            This makes sense, because Greet calls Greet2 inside itself before finishing.



Question 2:

    Suppose you accidentally write a recursive function that runs forever. 
    As you saw, your computer allocates memory on the stack for each function call.
    What happens to the stack when your recursive function runs forever?


Answer 2:

    If there are no protections in place, this would cause the computer to crash because all of the available memory is used up.
    In Python, this is prevented...but in a language like C, not so much. 
    The operation would continue until it could not, meaning as long as there's available memory it will go indefinitely.
        (Back of the book: Yes, and the error is called a Stack Overflow Error.)
